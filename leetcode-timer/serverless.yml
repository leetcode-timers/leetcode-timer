org: rtrnachiket
app: leetcode-timer-app
service:
  name: leetcode-timer

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'v1'}
  region: ${opt:region, 'us-east-1'}
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    apiVersion: v1
    createToken: ${file(configs/config.${self:provider.stage}.json):createToken}
    publicKey: ${file(configs/config.${self:provider.stage}.json):publicKey}
    privateKey: ${file(configs/config.${self:provider.stage}.json):privateKey}
    USERS_TABLE: Users-${self:provider.stage}
    SOLVES_TABLE: Solves-${self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SOLVES_TABLE}

functions:
  auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  authJWT:
    handler: src/lambda/auth/rs256Authorizer.handler

  dashboard:
    handler: src/lambda/http/dashboard.handler
    events:
      - http:
          method: get
          path: dashboard
          cors: true
          authorizer: authJWT

  createUser:
    handler: src/lambda/http/user/createUser.handler
    events:
      - http:
          method: post
          path: users
          cors: true
          authorizer: auth
  getUser:
    handler: src/lambda/http/user/getUser.handler
    events:
      - http:
          method: get
          path: users/me
          cors: true
          authorizer: authJWT
  deleteUser:
    handler: src/lambda/http/user/deleteUser.handler
    events:
      - http:
          method: delete
          path: users/{userId}
          cors: true
          authorizer: authJWT
  updateUser:
    handler: src/lambda/http/user/updateUser.handler
    events:
      - http:
          method: put
          path: users/{userId}
          cors: true
          authorizer: authJWT

  solveQuestion:
    handler: src/lambda/http/solves/userSolvesQuestion.handler
    events:
      - http:
          method: post
          path: users/{userId}/question/{questionId}
          cors: true
          authorizer: authJWT
  getAttemptedQuestions:
    handler: src/lambda/http/solves/getAttemptedQuestions.handler
    events:
      - http:
          method: get
          path: users/{userId}/questions
          cors: true
          authorizer: authJWT
  getAttempts:
    handler: src/lambda/http/solves/getAttempts.handler
    events:
      - http:
          method: get
          path: users/{userId}/questions/{questionId}
          cors: true
          authorizer: authJWT

resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
    SolvesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: questionId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: questionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SOLVES_TABLE}
